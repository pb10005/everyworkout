import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { useRouter } from "next/router";
import { useState } from "react";
import { useSession } from "next-auth/react";
import { api } from "../../utils/api";

import { Navigation, RecordCard, Loading, Button } from "../../components";

const SearchByExerciseId: NextPage = () => {
  const { data: sessionData } = useSession();
  
  const router = useRouter();
  const { exerciseId: ids } = router.query;
  const exerciseId = Array.isArray(ids) ? ids[0] : ids;
  
  const [page, setPage] = useState<number>(0);
  const [perPage, setPerPage] = useState<number>(10);

  const { data, isLoading, isSuccess } =
    api.workout.getUserWorkouts.useQuery({
      exerciseId: parseInt(exerciseId || "-1"),
      skip: page * perPage,
      take: perPage,
    });
   
  const { data:tmp } = api.workout.getUserWorkoutsCountByExerciseId.useQuery({
      exerciseId: parseInt(exerciseId || "-1"),
  });
  
  const count = tmp || -1;
  const maxPage = count > 0 ? Math.ceil(count / perPage): 0;
  
  
  const viewPrev = () => {
    const currentPage = Math.max(0, page-1);
    setPage(currentPage);
  };  
  
  const viewNext = () => {
    const currentPage = Math.min(page + 1, maxPage - 1);
    setPage(currentPage);
  };  
  
    
  return (
    <>
      <Head>
        <title>EveryWorkout</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Navigation />
      <div className="grid md:grid-cols-12 bg-gray-50">
        <div className="md:col-span-6 md:col-start-4">
          <section className="mb-2 p-2">
            <p className="text-sm text-gray-500">種目別トレーニング履歴</p>
            {isLoading && <Loading />}
            {count > 0 && (
              <div className="flex justify-center">
                <Button onClick={viewPrev}>Prev</Button>
                <span className="inline-block py-2 mx-4">{page + 1}/{maxPage}</span>
                <Button onClick={viewNext}>Next</Button>
              </div>)}
            {isSuccess && (
              <>
                {data?.length && data?.length > 0
                  ? data?.map((d) => {
                      return <RecordCard key={d.id}
                      id={d.id}
                      exerciseName={d.exercise.name}
                      date={d.date}
                      weight={d.weight}
                      reps={d.reps}
                      sets={d.sets}
                      note={d.note}
                      muscles={d.exercise.muscles.map(m => m.muscle)} />;
                    })
                  : "No data"}
              </>
            )}
          </section>
        </div>
      </div>
    </>
  );
};

export default SearchByExerciseId;
