// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BodyPart {
  id      Int      @id @default(autoincrement())
  name    String
  muscles Muscle[]
}

model Muscle {
  id          Int              @id @default(autoincrement())
  name        String
  name_kana   String           @default("")
  description String?
  bodyPartId  Int
  bodyPart    BodyPart         @relation(fields: [bodyPartId], references: [id])
  exercises   ExerciseMuscle[]
}

model Workout {
  id         String   @id @default(cuid())
  date       DateTime @default(now())
  weight     Int?
  reps       Int
  sets       Int
  note       String?
  exerciseId Int
  exercise   Exercise @relation(fields: [exerciseId], references: [id])
  createdAt  DateTime @default(now())
}

model Exercise {
  id          Int              @id @default(autoincrement())
  name        String
  description String?
  muscles     ExerciseMuscle[]
  workouts    Workout[]
}

model ExerciseMuscle {
  id         Int      @id @default(autoincrement())
  exerciseId Int
  muscleId   Int
  exercise   Exercise @relation(fields: [exerciseId], references: [id])
  muscle     Muscle   @relation(fields: [muscleId], references: [id])
  is_main    Boolean
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
