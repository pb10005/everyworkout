import { useState } from "react";
import { type NextPage } from "next";
import Head from "next/head";
import Router, { useRouter } from "next/router";
import { useSession } from "next-auth/react";

import { Button, Navigation, Loading } from "../../components";
import { api } from "../../utils/api";

const Dashboard: NextPage = () => {
  const { data: sessionData } = useSession();
  const router = useRouter();
  const { id: ids } = router.query;
  const id = Array.isArray(ids) ? ids[0] : ids;
  const {
    data,
    isLoading: loadingGet,
    isSuccess: successGet,
  } = api.workout.getWorkoutById.useQuery({
    id: id || "",
  });
  const dateDisplay = data?.date.toISOString().split("T")[0] || "";
  const [metricsCode, setMetricsCode] = useState<string>("01");
  const [errMsg, setErrMsg] = useState<string>("");

  const mutation = api.maximum.add.useMutation();
  const registerMaximum = async () => {
    await mutation
      .mutateAsync({
        userId: sessionData?.user?.id || "",
        exerciseId: data?.exerciseId || -1,
        date: data?.date.toISOString() || "",
        metrics_code: metricsCode,
        value:
          metricsCode === "01"
            ? data?.weight || 0
            : metricsCode === "02"
            ? data?.reps || 0
            : 0,
      })
      .catch((err) => {
        setErrMsg(err.data.path);
      });
  };
  return (
    <>
      <Head>
        <title>EveryWorkout</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Navigation />
      <div className="grid md:grid-cols-12">
        <div className="md:col-span-6 md:col-start-4">
          {loadingGet && <Loading />}
          {mutation.isLoading && <Loading />}
          {mutation.isSuccess && (
            <>
              <p className="rounded-lg bg-green-100 p-4 text-green-900">
                登録完了
              </p>
            </>
          )}
          {mutation.isError && (
            <>
              <p className="rounded-lg bg-red-100 p-4 text-red-900">{errMsg}</p>
            </>
          )}
          {successGet && (
            <>
              <p className="text-xl">{data?.exercise.name}</p>
              <p className="text-sm text-gray-500">{dateDisplay}</p>
              <section className="p-2">
                <div>
                  <span className="text-lg font-bold">{data?.weight}</span> kg
                </div>
                <div>
                  <span className="text-lg font-bold">{data?.reps}</span> reps
                </div>
                <div>
                  <span className="text-lg font-bold">{data?.sets}</span> sets
                </div>
              </section>
              <section className="my-2">
                {data?.note && (
                  <>
                    <p>メモ</p>
                    <p className="rounded bg-gray-200 p-4">{data?.note}</p>
                  </>
                )}
              </section>
              <section className="rounded-xl border-2 border-gray-200 p-4">
                <div className="mb-2">
                  <label className="mr-2" htmlFor="metrics">
                    指標
                  </label>
                  <select
                    name="metrics"
                    className="p-2"
                    value={metricsCode}
                    onChange={(e) => setMetricsCode(e.target.value)}
                  >
                    <option value="01">重量</option>
                    <option value="02">reps</option>
                  </select>
                </div>
                {!mutation.isLoading && (
                  <Button onClick={() => void registerMaximum()}>
                    Max記録登録
                  </Button>
                )}
              </section>
            </>
          )}
        </div>
      </div>
    </>
  );
};

export default Dashboard;
