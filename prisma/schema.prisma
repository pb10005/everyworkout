generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model BodyPart {
  id      Int      @id @default(autoincrement())
  name    String
  muscles Muscle[]
}

model Muscle {
  id          Int              @id @default(autoincrement())
  name        String
  name_kana   String           @default("")
  description String?
  bodyPartId  Int
  exercises   ExerciseMuscle[]
  bodyPart    BodyPart         @relation(fields: [bodyPartId], references: [id])
}

model Workout {
  id                    String   @id @default(cuid())
  userId                String?
  date                  DateTime @default(now())
  weight                Float?
  reps                  Int
  sets                  Int
  note                  String?
  exerciseId            Int
  weeklyReportPublished Boolean  @default(false)
  createdAt             DateTime @default(now())
  exercise              Exercise @relation(fields: [exerciseId], references: [id])
  user                  User?    @relation(fields: [userId], references: [id])

  @@index([id, userId])
  @@index([userId, exerciseId, date])
}

model Exercise {
  id          Int              @id @default(autoincrement())
  name        String
  description String?
  muscles     ExerciseMuscle[]
  maximums    Maximum[]
  workouts    Workout[]
}

model ExerciseMuscle {
  id         Int      @id @default(autoincrement())
  exerciseId Int
  muscleId   Int
  is_main    Boolean
  exercise   Exercise @relation(fields: [exerciseId], references: [id])
  muscle     Muscle   @relation(fields: [muscleId], references: [id])

  @@index([muscleId, is_main])
}

model WeeklyReport {
  id        Int      @id @default(autoincrement())
  userId    String
  content   String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model Maximum {
  id           String   @id @default(cuid())
  userId       String
  exerciseId   Int
  metrics_code String
  value        Float
  date         DateTime
  exercise     Exercise @relation(fields: [exerciseId], references: [id])
  user         User     @relation(fields: [userId], references: [id])

  @@unique([userId, exerciseId, metrics_code, value, date])
  @@index([id, userId])
  @@index([exerciseId, metrics_code])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  maximums      Maximum[]
  sessions      Session[]
  workouts      Workout[]
  weeklyReports WeeklyReport[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
